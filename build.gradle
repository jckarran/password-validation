plugins {
    id 'java'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id "com.bmuschko.docker-java-application" version "6.4.0"
}

version '0.3'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.10.1'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.10.1'
    compile 'io.javalin:javalin:3.8.0'
    compile "org.slf4j:slf4j-simple:1.7.28"
    compile 'org.apache.logging.log4j:log4j-api:2.13.2'
    compile 'org.apache.logging.log4j:log4j-core:2.13.2'
    compile 'org.koin:koin-core:2.1.5'
    compile 'io.prometheus:simpleclient_httpserver:0.8.1'
    testCompile 'com.willowtreeapps.assertk:assertk-jvm:0.22'
    testCompile 'org.junit.jupiter:junit-jupiter:5.4.2'
    testCompile 'io.rest-assured:rest-assured:4.3.0'
    testCompile 'io.rest-assured:json-path:4.3.0'
    testCompile 'io.rest-assured:kotlin-extensions:4.3.0'
    testCompile "io.mockk:mockk:1.9.3"
}

jar {
    enabled(true)
    baseName("password-validation")
    version(getProject().getVersion())
}

docker {
    javaApplication {
        baseImage = 'openjdk:8'
        ports = [7000]
        maintainer = 'jckss'
    }
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.5"
}

def ignorePackagesInJacocoReport = { classDirectories ->
    files(classDirectories.files.collect {
        fileTree( dir: it,
                excludes: [
                        'password/validation/application/metrics/**',
                        'password/validation/application/model/**',
                        'password/validation/application/module/**'
                ])
    })
}

jacocoTestReport {
    reports {
        html.enabled = true
        html.destination = file("$buildDir/reports/coverage")
    }

    afterEvaluate {
        classDirectories.setFrom(ignorePackagesInJacocoReport(classDirectories))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = "0.9".toBigDecimal()
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(ignorePackagesInJacocoReport(classDirectories))
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}